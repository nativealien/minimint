/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MiniMintFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "collections"
      | "deployCollection"
      | "getCollections"
      | "owner"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CollectionDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "collections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployCollection",
    values: [string, string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollections",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "collections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CollectionDeployedEvent {
  export type InputTuple = [
    owner: AddressLike,
    collectionAddress: AddressLike,
    name: string,
    symbol: string,
    contractMetadataURI: string,
    marketplaceAddress: AddressLike
  ];
  export type OutputTuple = [
    owner: string,
    collectionAddress: string,
    name: string,
    symbol: string,
    contractMetadataURI: string,
    marketplaceAddress: string
  ];
  export interface OutputObject {
    owner: string;
    collectionAddress: string;
    name: string;
    symbol: string;
    contractMetadataURI: string;
    marketplaceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MiniMintFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MiniMintFactory;
  waitForDeployment(): Promise<this>;

  interface: MiniMintFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  collections: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  deployCollection: TypedContractMethod<
    [
      name: string,
      symbol: string,
      contractMetadataURI: string,
      marketplaceAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getCollections: TypedContractMethod<[], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "collections"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "deployCollection"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      contractMetadataURI: string,
      marketplaceAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCollections"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CollectionDeployed"
  ): TypedContractEvent<
    CollectionDeployedEvent.InputTuple,
    CollectionDeployedEvent.OutputTuple,
    CollectionDeployedEvent.OutputObject
  >;

  filters: {
    "CollectionDeployed(address,address,string,string,string,address)": TypedContractEvent<
      CollectionDeployedEvent.InputTuple,
      CollectionDeployedEvent.OutputTuple,
      CollectionDeployedEvent.OutputObject
    >;
    CollectionDeployed: TypedContractEvent<
      CollectionDeployedEvent.InputTuple,
      CollectionDeployedEvent.OutputTuple,
      CollectionDeployedEvent.OutputObject
    >;
  };
}
