/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MiniMintMarketplace {
  export type ListingStruct = { seller: AddressLike; price: BigNumberish };

  export type ListingStructOutput = [seller: string, price: bigint] & {
    seller: string;
    price: bigint;
  };
}

export interface MiniMintMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyNFT"
      | "delistNFT"
      | "factory"
      | "getListing"
      | "isFactoryDeployedCollection"
      | "listNFT"
      | "listings"
      | "mainCollection"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NFTDelisted" | "NFTListed" | "NFTSold"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistNFT",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFactoryDeployedCollection",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mainCollection",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delistNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFactoryDeployedCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mainCollection",
    data: BytesLike
  ): Result;
}

export namespace NFTDelistedEvent {
  export type InputTuple = [
    seller: AddressLike,
    collection: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    collection: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    seller: string;
    collection: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTListedEvent {
  export type InputTuple = [
    seller: AddressLike,
    collection: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    collection: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    seller: string;
    collection: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTSoldEvent {
  export type InputTuple = [
    buyer: AddressLike,
    collection: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    collection: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    buyer: string;
    collection: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MiniMintMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): MiniMintMarketplace;
  waitForDeployment(): Promise<this>;

  interface: MiniMintMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyNFT: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  delistNFT: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  getListing: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [MiniMintMarketplace.ListingStructOutput],
    "view"
  >;

  isFactoryDeployedCollection: TypedContractMethod<
    [collection: AddressLike],
    [boolean],
    "view"
  >;

  listNFT: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, bigint] & { seller: string; price: bigint }],
    "view"
  >;

  mainCollection: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyNFT"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "delistNFT"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [MiniMintMarketplace.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFactoryDeployedCollection"
  ): TypedContractMethod<[collection: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "listNFT"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, bigint] & { seller: string; price: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "mainCollection"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "NFTDelisted"
  ): TypedContractEvent<
    NFTDelistedEvent.InputTuple,
    NFTDelistedEvent.OutputTuple,
    NFTDelistedEvent.OutputObject
  >;
  getEvent(
    key: "NFTListed"
  ): TypedContractEvent<
    NFTListedEvent.InputTuple,
    NFTListedEvent.OutputTuple,
    NFTListedEvent.OutputObject
  >;
  getEvent(
    key: "NFTSold"
  ): TypedContractEvent<
    NFTSoldEvent.InputTuple,
    NFTSoldEvent.OutputTuple,
    NFTSoldEvent.OutputObject
  >;

  filters: {
    "NFTDelisted(address,address,uint256)": TypedContractEvent<
      NFTDelistedEvent.InputTuple,
      NFTDelistedEvent.OutputTuple,
      NFTDelistedEvent.OutputObject
    >;
    NFTDelisted: TypedContractEvent<
      NFTDelistedEvent.InputTuple,
      NFTDelistedEvent.OutputTuple,
      NFTDelistedEvent.OutputObject
    >;

    "NFTListed(address,address,uint256,uint256)": TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;
    NFTListed: TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;

    "NFTSold(address,address,uint256,uint256)": TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;
    NFTSold: TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;
  };
}
